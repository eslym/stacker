name: Docker Build, Extract Binary, and Release

on:
  push:
    tags:
      - "v*"

env:
  REGISTRY_IMAGE: eslym/stacker

permissions:
  contents: write

jobs:
  build:
    name: Build Binaries and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Build Binary
        run: |
          ./build.sh
          mkdir -p archive
          tar --transform 's|build/stacker-amd64|stacker|' -czf archive/stacker-amd64.tar.gz build/stacker-amd64
          tar --transform 's|build/stacker-arm64|stacker|' -czf archive/stacker-arm64.tar.gz build/stacker-arm64

      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ github.sha }}
          path: build

      - name: Upload Release Asset (amd64)
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: archive/stacker-amd64.tar.gz

      - name: Upload Release Asset (arm64)
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: archive/stacker-arm64.tar.gz

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Binary
        uses: actions/download-artifact@v4
        with:
          name: binary-${{ github.sha }}
          path: build
        
      - name: Fix Permissions
        run: chmod +x build/*

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/${{ matrix.arch }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ env.REGISTRY_IMAGE }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          build-args: GOARCH=${{ matrix.arch }}

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ github.sha }}-${{ matrix.arch }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  manifest:
    name: Create Manifest
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ github.sha }}-*
          merge-multiple: true

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          flavor: |
            latest=true
          tags: |
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{version}}

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
